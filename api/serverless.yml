service: cassava-pay

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"
  environment:
    DYNAMODB_TABLE: cassava-payment-table

  ## Create ApiKey usage plans only free at the moment
  apiGateway:
    apiKeys:
      - free:
          - dev-free-apikey
    usagePlan:
      - free:
          quota:
            limit: 5000
            offset: 2
            period: MONTH
          throttle:
            burstLimit: 200
            rateLimit: 100

  ## Iam role permission policy to use dynamodb
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

## Api routes
functions:
  ## Authentication Verification handler for control panel uses JWT
  verify-claim:
    handler: functions/authentication/handler.verify

  ## Users API
  RegisterUser:
    handler: functions/authentication/handler.register
    events:
      - http:
          method: POST
          path: /api/users/create_account
          cors: true

  loginUser:
    handler: functions/authentication/handler.login
    events:
      - http:
          method: POST
          path: /api/users/login
          cors: true

  createMerchantApiKey:
    handler: functions/merchant/handler.createApiKey
    events:
      - http:
          method: POST
          path: /api/users/create_api_key
          cors: true
          authorizer:
            name: verify-claim
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  enableDisableApiKey:
    handler: functions/merchant/handler.enableDisableApiKey
    events:
      - http:
          method: POST
          path: /api/admin/update_apikey
          cors: true
          authorizer:
            name: verify-claim
            identitySource: method.request.header.Authorization
            resultTtlInSeconds: 3600

  ## Create new transaction
  createTransaction:
    handler: functions/transactions/handler.createTransaction
    events:
      - http:
          method: POST
          path: /api/merchants/create_transaction
          cors: true
          private: true

  ## Process new transction block
  # processTransaction:
  #   handler: functions/transactions/handler.processTransaction
  #   dependsOn: TransactionBlock
  #   events:
  #     - sns:
  #         arn: !Ref TransactionBlock
  #         topicName: transaction-block-event

  ## Forward account balance to merchants coldwallet
  ## will be implemented in the future
  # forwardToColdWallet:
  #   handler: functions/transactions/handler.forwardPayment
  #   dependsOn: TransactionBlock
  #   events:
  #     - sns:
  #         arn: !Ref TransactionBlock
  #         topicName: transaction-block-event

resources:
  Resources:
    DynamoDbTable:
      Type: "AWS::DynamoDB::Table"
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

    # SNS Topics will be implemented in the future
    # TransactionBlock:
    #   Type: AWS::SNS::Topic
    #   Properties:
    #     DisplayName: A New Transaction Block Has Been Added
    #     TopicName: transaction-block-event

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

package:
  exclude:
    - test/**
    - coverage/**
    - .nyc_output/**
